function [A,b,coordinates,elements3, dirichlet, neumann, FreeNodes, PSI,PHI] = Cauchy_Init(geom,hmax)
% Cauchy_Init returns unmodified Stiffness Matrix A and load vector b
% according to geometry. mesh generated by pdetools.

% Usually generating mesh will cost a long time.
tic;
[p,e,t] = initmesh(geom, 'hmax',hmax);
disp('Mesh generated');
toc;
coordinates = p';

% only triangluar elements here.
elements3 = t(1:3,:)';

% Cauchy Problem Settings 
e_dirichlet = (e(5,:) ~= 1);
e_neumann = (e(5,:) == 1);

dirichlet = e(1:2,e_dirichlet)';
neumann = e(1:2,e_neumann)';


PSI = zeros(size(elements3,1),1);
PHI = zeros(size(elements3,1),1);
% setup phi and psi integrals on each elements
for j = 1:size(elements3,1)
    PSI(j) = Triquad(@Psi,coordinates(elements3(j,:),:));
    PHI(j) = Triquad(@Phi,coordinates(elements3(j,:),:));
end
%
% above to be modified.
FreeNodes=setdiff(1:size(coordinates,1),unique(dirichlet));
A = sparse(size(coordinates,1),size(coordinates,1));
b = sparse(size(coordinates,1),1);

% Assembly
for j = 1:size(elements3,1)
  A(elements3(j,:),elements3(j,:)) = A(elements3(j,:),elements3(j,:)) ...
      + pstima3(coordinates(elements3(j,:),:),PSI(j),PHI(j));
end
% for j = 1:size(elements4,1)
%   A(elements4(j,:),elements4(j,:)) = A(elements4(j,:),elements4(j,:)) ...
%       + stima4(coordinates(elements4(j,:),:));
% end

% Volume Forces
for j = 1:size(elements3,1)
  b(elements3(j,:)) = b(elements3(j,:)) + ...
      det([1,1,1; coordinates(elements3(j,:),:)']) * ...
      f(sum(coordinates(elements3(j,:),:))/3)/6;
end
% for j = 1:size(elements4,1)
%   b(elements4(j,:)) = b(elements4(j,:)) + ...
%       det([1,1,1; coordinates(elements4(j,1:3),:)']) * ...
%       f(sum(coordinates(elements4(j,:),:))/4)/4;
% end


end

